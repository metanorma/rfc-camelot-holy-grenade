# Auto-generated by Cimas: Do not edit it manually!
# See https://github.com/metanorma/cimas
#!make
SHELL := cmd
# Ensure the xml2rfc cache directory exists locally
IGNORE := $(shell md $(USERPROFILE)\.cache\xml2rfc)

SRC  := $(filter-out README.adoc, $(wildcard *.adoc))
XML  := $(patsubst %.adoc,%.xml,$(SRC))
XMLRFC2  := $(patsubst %.adoc,%.xml,$(SRC))
XMLRFC3  := $(patsubst %.adoc,%.v3.xml,$(SRC))
HTML := $(patsubst %.adoc,%.html,$(SRC))
DOC  := $(patsubst %.adoc,%.doc,$(SRC))
PDF  := $(patsubst %.adoc,%.pdf,$(SRC))
TXT  := $(patsubst %.adoc,%.txt,$(SRC))
NITS := $(patsubst %.adoc,%.nits,$(SRC))
WSD  := $(wildcard models/*.wsd)
XMI	 := $(patsubst models/%,xmi/%,$(patsubst %.wsd,%.xmi,$(WSD)))
PNG	 := $(patsubst models/%,images/%,$(patsubst %.wsd,%.png,$(WSD)))

ifdef METANORMA_DOCKER
  PREFIX_CMD := echo "Running via docker..." & docker run -v "$$(pwd)":/metanorma/ $(METANORMA_DOCKER)

else
  PREFIX_CMD := echo "Running locally..." & bundle exec
endif

FORMAT_MARKER := mn-output-
FORMATS := $(subst ${\n},${ },$(shell grep "$(FORMAT_MARKER)" $(SRC) | cut -f 2 -d " " | tr "," "\n" | sort | uniq))

_OUT_FILES := $(foreach FORMAT,$(FORMATS),$(shell echo $(FORMAT) | tr '[:lower:]' '[:upper:]'))
OUT_FILES  := $(foreach F,$(_OUT_FILES),$($F))

all: $(OUT_FILES)

%.v3.xml %.xml %.html %.doc %.pdf %.txt:	%.adoc | bundle
	$(PREFIX_CMD) metanorma $^

%.nits: %.txt
	$(eval VERSIONED_NAME := $(shell grep :name: $*.adoc | cut -f 2 -d ' '))
	copy $^ $(VERSIONED_NAME).txt
	idnits --verbose $(VERSIONED_NAME).txt > $@
	copy $@ $(VERSIONED_NAME).nits
	cat $(VERSIONED_NAME).nits

images: $(PNG)

images/%.png: models/%.wsd
	plantuml -tpng -o ../images/ $<

xmi: $(XMI)

xmi/%.xmi: models/%.wsd
	plantuml -xmi:star -o ../xmi/ $<

define FORMAT_TASKS
OUT_FILES-$(FORMAT) := $($(shell echo $(FORMAT) | tr '[:lower:]' '[:upper:]'))

open-$(FORMAT):
	open $$(OUT_FILES-$(FORMAT))

clean-$(FORMAT):
	rm -f $$(OUT_FILES-$(FORMAT))

$(FORMAT): clean-$(FORMAT) $$(OUT_FILES-$(FORMAT))

.PHONY: clean-$(FORMAT)

endef

$(foreach FORMAT,$(FORMATS),$(eval $(FORMAT_TASKS)))

open: open-html

clean:
	rm -rf $(OUT_FILES)

bundle:
ifndef METANORMA_DOCKER
	bundle install --jobs 4 --retry 3
endif

.PHONY: bundle all open clean

#
# Watch-related jobs
#

.PHONY: watch serve watch-serve

NODE_BINS          := onchange live-serve run-p
NODE_BIN_DIR       := node_modules/.bin
NODE_PACKAGE_PATHS := $(foreach PACKAGE_NAME,$(NODE_BINS),$(NODE_BIN_DIR)/$(PACKAGE_NAME))

$(NODE_PACKAGE_PATHS): package.json
	npm i

watch: $(NODE_BIN_DIR)/onchange
	make all
	$< $(ALL_SRC) -- make all

define WATCH_TASKS
watch-$(FORMAT): $(NODE_BIN_DIR)/onchange
	make $(FORMAT)
	$$< $$(SRC_$(FORMAT)) -- make $(FORMAT)

.PHONY: watch-$(FORMAT)
endef

$(foreach FORMAT,$(FORMATS),$(eval $(WATCH_TASKS)))

ifndef PORT
override PORT = 8123
endif

serve: $(NODE_BIN_DIR)/live-server revealjs-css reveal.js
	set port=$(PORT) & \
	for /r %%html in $(HTML) do ( \
		$< --entry-file=%%html --port=%port% --ignore="*.html,*.xml,Makefile,Gemfile.*,package.*.json" --wait=1000 & \
		set /A port=%port%+1 \
	)

watch-serve: $(NODE_BIN_DIR)/run-p
	$< watch serve

#
# Deploy jobs
#

publish:
	md published
	cp -a $(basename $(SRC)).* published/
	copy $(firstword $(HTML)) published/index.html
	if exist "source\images" xcopy /E source\images $@
